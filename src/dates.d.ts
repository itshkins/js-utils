import dayjs from 'dayjs';
export declare const TIMEZONE = "Europe/Moscow";
export declare const DATE_LENGTH = 10;
export declare const TIME_LENGTH = 8;
export declare const DATE_TIME_LENGTH: number;
export declare const SECOND = 1000;
export declare const SECONDS_IN_MINUTE = 60;
export declare const MINUTE: number;
export declare const MINUTES_IN_HOUR = 60;
export declare const HOUR: number;
export declare const HOURS_IN_DAY = 24;
export declare const DAY: number;
export declare const DAYS_IN_WEEK = 7;
export declare const WEEK: number;
export declare const DAYS_IN_MONTH = 28;
export declare const MONTH: number;
export declare const WEEKS_IN_YEAR = 52;
export declare const DAYS_IN_YEAR: number;
export declare const SUNDAY = 0;
export declare const MONDAY = 1;
export declare const TUESDAY = 2;
export declare const WEDNESDAY = 3;
export declare const THURSDAY = 4;
export declare const FRIDAY = 5;
export declare const SATURDAY = 6;
export type DateModel = dayjs.Dayjs;
export type DayKey = number;
export type DateKey = string;
export type TimeKey = string;
export type DateTimeKey = string;
export type DateToDay = (date: DateKey) => DayKey;
export type DayToDate = (day: DayKey) => DateKey;
declare class DateService {
    shouldCache: boolean;
    atCache: Map<string, dayjs.Dayjs>;
    msCache: Map<number, dayjs.Dayjs>;
    toggleCache(force?: boolean): void;
    clearCache(): void;
    now(): DateModel;
    ms(ms: number): DateModel;
    at(at: string): DateModel;
    isValidMs(at: string): boolean;
    isValidAt(at: string): boolean;
    isValidDate(at: string): boolean;
}
declare const dateService: DateService;
export default dateService;
export declare const now: () => DateModel;
export declare const ms: (ms: number) => DateModel;
export declare const at: (at: string) => DateModel;
export declare const isValidMs: (at: string) => boolean;
export declare const isValidAt: (at: string) => boolean;
export declare const isValidDate: (at: string) => boolean;
export declare function guessDateModel(dayOfMonth: any, month: any, futureModel: any): DateModel | undefined;
export declare const getDateFromDateTime: (date: DateTimeKey) => DateKey;
export declare function convertTimeToSeconds(time: any): any;
export declare const compareTime: (time: any, otherTime: any) => number;
export declare function withPreviousYear(at: DateTimeKey): DateTimeKey;
export declare function withCustomYear(at: DateTimeKey, customYear: number): DateTimeKey;
export declare function incrementYear(at: DateTimeKey, yearIncrement: number): DateTimeKey;
export declare function roundDate(dateModel: DateModel, factor: number, onRound?: (x: number) => number): DateModel;
export declare function formatDateTime(date: DateModel, withMs?: boolean, defaultValue?: any): any;
export declare function formatDateTimeForHumans(date: any, withMs?: boolean, defaultValue?: string): string;
export declare function formatDate(dateModel: any, defaultValue?: string): string;
export declare function formatDateForHumans(dateModel: any, defaultValue?: string): string;
export declare function formatDayForHumans(date: any, defaultValue?: string): string;
export declare function formatTime(dateModel: any, withMs?: boolean, defaultValue?: string): string;
export declare function formatTimeSpan(totalMs: any, withMs?: boolean, defaultValue?: string): string;
export declare function humanizeDuration(totalDays: number, maxAge: number): string;
export declare function getIfNotEpoch(at: string): string | undefined;
